Fichier functions.php

 // Backoffice
function mota_add_admin_pages()
{ // Construction de notre page admin.
     add_menu_page(__('Paramètre du thème Mota', 'Mota'), __('Mota', 'mota'), 'manage_options', 'mota-settings', 'mota_theme_settings', 'dashicons-admin-settings', 60);
     // Manage_options : Droits accès administrateurs
     // Slugs : définit la page dans l'URL
     // Fonction à appeller pour définir le contenu de la page
     // Dashicons est l'icone par defaut pour les settings WP
     // 60 : Position de la page dans le menu
}


// Créer la fonction 'mota_theme_settings' qui va afficher le contenu de la page
function mota_theme_settings()
{
     if ( ! current_user_can( 'manage_options' ) ) {
          return;
      }
     echo '<h1>' . get_admin_page_title() . '</h1>'; // afficher avec 'echo' le titre de la page grâce à la fonction WP get_admin_page_title
     echo '<form action="options.php" method="post" name="mota_settings">'; // Fonction de rappel de notre page de réglages grâce à l'élément <form> qui pointe vers option.php et qui renvoi ses données en POST.
     echo '<div>';

     settings_fields('mota_settings_fields');
     do_settings_sections('mota_settings_section'); // Permet de boucler sur les différentes sections pour y afficher les champs correspondants.
     submit_button(); // Bouton pour enregistrer le formulaire

     echo '</div>';
     echo '</form>';
}

// Créer la fonction 'register_settings' qui sert à déclarer un réglage auprès de WP
function mota_settings_register()
{
     register_setting('mota_settings_fields', 'mota_settings_fields', 'mota_settings_fields_validate');

     add_settings_section('mota_settings_section', __('Paramètres', 'mota'), 'mota_settings_section_introduction', 'mota_settings_section');
     // 'add_settings_section' = section pour ranger nos réglages.
     // Le premier est 'Paramètres' 
     add_settings_field('mota_settings_field_introduction', __('Introduction', 'mota'), 'mota_settings_field_introduction_output', 'mota_settings_section', 'mota_settings_section');
     // mota_settings_field_introduction_output est un nom libre mais ici il est explicite 'output' pour afficher.
     add_settings_field('mota_settings_field_phone_number', __('Numéro de téléphone', 'mota'), 'mota_settings_field_phone_number_output', 'mota_settings_section', 'mota_settings_section');
     add_settings_field('mota_settings_field_email', __('Adresse mail', 'mota'), 'mota_settings_field_email_output', 'mota_settings_section', 'mota_settings_section');
}

function mota_settings_section_introduction()
{ // Champ Introduction

     echo __('Paramètrez les différentes options de notre thème Mota.', 'mota');
}
// Fonction __() = est une fonction de traduction, essentielle pour fournir des sites multilingues (traduit les textes en “dur” dans le thème).


function mota_settings_fields_validate($inputs) // Validate : nettoie et adapte les valeurs de nos réglages (optionel mais permet des vérifications lors de l’enregistrement des données).
{
     if (!empty($_POST)) {
          if (!empty($_POST['mota_settings_field_introduction'])) {
               update_option('mota_settings_field_introduction', sanitize_text_field($_POST['mota_settings_field_introduction']));
          }
          if (!empty($_POST['mota_settings_field_phone_number'])) {
               update_option('mota_settings_field_phone_number', sanitize_text_field($_POST['mota_settings_field_phone_number']));
          }
          if (!empty($_POST['mota_settings_field_email'])) {
               update_option('mota_settings_field_email', sanitize_text_field($_POST['mota_settings_field_email']));
          }
          // sanitize_text_field pour s'assurer que les données sont correctement nettoyées avant d'être enregistrées.
     }

     return $inputs;
}

function mota_settings_field_introduction_output()
{
     $value = get_option('mota_settings_field_introduction'); // $value récupère la valeur de l'option avec get_option puis la clé du champ

     echo '<input name="mota_settings_field_introduction" type="text" value="' . $value . '" />'; // On affiche le champ avec la balise <input>
}

function mota_settings_field_phone_number_output()
{
     $value = get_option('mota_settings_field_phone_number');

     echo '<input name="mota_settings_field_phone_number" type="text" value="' . $value . '" />';
}

function mota_settings_field_email_output()
{
     $value = get_option('mota_settings_field_email');

     echo '<input name="mota_settings_field_email" type="text" value="' . $value . '" />';
}

// function mota_register_custom_post_types() {
//      $labels_catalogue = array(
//           'menu_name'             => __('Catalogue', 'mota'),
//           'name_admin_bar'        => __('Catalogue', 'mota'),
//           'add_new_item'          => __('Ajouter une nouvelle photo', 'mota'),
//           'new_item'              => __('Nouvelle photo', 'mota'),
//           'edit_item'             => __('Modifier la photo', 'mota'),
//      );

//      $args_catalogue = array(
//           'label'                  => __('Catalogue', 'mota'),
//           'description'            => __('Catalogue', 'mota'),
//           'labels'                 => $labels_catalogue,
//           'supports'               => array('title', 'thumbnail', 'excerpt', 'editor'),
//           'hierarchical'           => false,
//           'public'                 => true,
//           'show_ui'                => true,
//           'show_in_menu'           => true,
//           'menu_position'          => 40,
//           'show_in_admin_bar'      => true,
//           'show_in_nav_menus'      => true,
//           'can_export'             => true,
//           'has_archive'            => true,
//           'exclude_from_search'    => false,
//           'publicly_queryable'     => true,
//           'capability_type'        => 'post',
//           'menu_icon'              => 'dashicons-drumstick',
//      );

//      register_post_type('cif_catalogue', $args_catalogue);
// }
// Retiré ici puisque remplacé par des pluggins ACF et CPT UI dans le backoffice.


add_action('admin_menu', 'mota_add_admin_pages', 10); // chiffre par défaut représentant la priorité de l'action.
add_action('admin_init', 'mota_settings_register');
// add_action('init', 'mota_register_custom_post_types', 11);
// Retiré ici puisque remplacé par des pluggins ACF et CPT UI dans le backoffice.


// Résumé des fonctions utilisées :
//     register_setting() déclare un lot de réglages ;
//     add_settings_section()  déclare une section pour y ranger nos réglages ;
//     add_settings_field()  déclare un champ ;
//     settings_field()  affiche les champs cachés nécessaires pour traiter notre formulaire ;
//     do_settings_sections()  va afficher les champs associés aux sections ;
//     submit_button()  affiche le bouton de soumission du formulaire.
// Cours : https://openclassrooms.com/fr/courses/8069121-perfectionnez-vous-sur-wordpress/8225943-creez-une-page-d-administration-pour-votre-theme